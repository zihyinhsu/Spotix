// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace Spotix.Utilities.Models.EFModels;

public partial class AppDbContext : IdentityDbContext<User>
{
	public AppDbContext(DbContextOptions<AppDbContext> options)
		: base(options)
	{
	}

	public virtual DbSet<Area> Areas { get; set; }

	public virtual DbSet<Event> Events { get; set; }

	public virtual DbSet<Order> Orders { get; set; }

	public virtual DbSet<Place> Places { get; set; }

	public virtual DbSet<Session> Sessions { get; set; }

	public virtual DbSet<Ticket> Tickets { get; set; }

	public virtual DbSet<User> Users { get; set; }

	public virtual DbSet<Image> Images { get; set; }


	protected override void OnModelCreating(ModelBuilder modelBuilder)
	{

		base.OnModelCreating(modelBuilder); // 確保調用基類的 OnModelCreating 方法

		// roles 定義
		var roles = new List<IdentityRole>
		{
			new IdentityRole { Id = "d7bece5e-cba2-4f5a-a158-2f56919bd43d", ConcurrencyStamp = "d7bece5e-cba2-4f5a-a158-2f56919bd43d", Name = "Admin", NormalizedName = "Admin".ToUpper() },
			new IdentityRole { Id = "25935620-161c-4c2f-8936-fe88436ad02c", ConcurrencyStamp = "25935620-161c-4c2f-8936-fe88436ad02c", Name = "User", NormalizedName = "User".ToUpper() }
		};

		modelBuilder.Entity<IdentityRole>().HasData(roles);

		  // 配置 OrderCache 資料表
  modelBuilder.Entity<OrderCache>(entity =>
  {
      entity.ToTable("OrderCache");

      entity.HasKey(e => e.Id);

      entity.Property(e => e.Id)
          .IsRequired()
          .HasMaxLength(449);

      entity.Property(e => e.Value)
          .IsRequired();

      entity.Property(e => e.ExpiresAtTime)
          .IsRequired();

      entity.Property(e => e.SlidingExpirationInSeconds)
          .IsRequired(false);

      entity.Property(e => e.AbsoluteExpiration)
          .IsRequired(false);

      entity.HasIndex(e => e.ExpiresAtTime)
          .HasDatabaseName("Index_ExpiresAtTime")
          .IsUnique(false);
  });

		modelBuilder.Entity<Area>(entity =>
		{
			entity.Property(e => e.Name)
				.IsRequired()
				.HasMaxLength(100);

			entity.HasOne(d => d.Session).WithMany(p => p.Areas)
				.HasForeignKey(d => d.SessionId)
				.HasConstraintName("FK_Areas_Sessions");
		});

		modelBuilder.Entity<Event>(entity =>
		{
			entity.HasIndex(e => e.Name, "IX_Events").IsUnique();

			entity.Property(e => e.Host)
				.IsRequired()
				.HasMaxLength(50);
			entity.Property(e => e.ImgUrl).IsRequired();
			entity.Property(e => e.CoverUrl).IsRequired();
			entity.Property(e => e.Info).IsRequired();
			entity.Property(e => e.Name)
				.IsRequired()
				.HasMaxLength(100);
			entity.Property(e => e.Published).HasDefaultValue(true);

			entity.HasOne(d => d.Place).WithMany(p => p.Events)
				.HasForeignKey(d => d.PlaceId)
				.OnDelete(DeleteBehavior.ClientSetNull)
				.HasConstraintName("FK_Events_Places");
		});

		modelBuilder.Entity<Image>(entity =>
		{
			entity.Property(e => e.ImageUrl).IsRequired();
		});

		modelBuilder.Entity<Order>(entity =>
		{
			entity.Property(e => e.CreatedTime).HasColumnType("datetime");
			entity.Property(e => e.OrderNumber)
				.IsRequired()
				.HasMaxLength(50)
				.IsUnicode(false);
	
			entity.Property(e => e.UserId).HasMaxLength(450);

			entity.HasOne(d => d.User).WithMany(p => p.Orders)
				.HasForeignKey(d => d.UserId)
				.HasConstraintName("FK_Orders_Users");
		});

		modelBuilder.Entity<Place>(entity =>
		{
			entity.Property(e => e.Enabled).HasDefaultValue(true);
			entity.Property(e => e.Name)
				.IsRequired()
				.HasMaxLength(50);
		});

		modelBuilder.Entity<Session>(entity =>
		{
			entity.HasIndex(e => e.Name, "IX_Sessions").IsUnique();

			entity.Property(e => e.AvailableTime).HasColumnType("datetime");
			entity.Property(e => e.Name)
				.IsRequired()
				.HasMaxLength(100);
			entity.Property(e => e.PublishTime).HasColumnType("datetime");
			entity.Property(e => e.Published).HasDefaultValue(true);
			entity.Property(e => e.SessionTime).HasColumnType("datetime");

			entity.HasOne(d => d.Event).WithMany(p => p.Sessions)
				.HasForeignKey(d => d.EventId)
				.HasConstraintName("FK_Sessions_Events");
		});

		modelBuilder.Entity<Ticket>(entity =>
		{
			entity.Property(e => e.TicketNumber)
				.IsRequired()
				.HasMaxLength(50)
				.IsUnicode(false);
			entity.Property(e => e.RecieverId).HasMaxLength(100);
			entity.Property(e => e.SessionName).HasMaxLength(100); 

			entity.HasOne(d => d.Area).WithMany(p => p.Tickets)
				.HasForeignKey(d => d.AreaId)
				.HasConstraintName("FK_Tickets_Areas");

			entity.HasOne(d => d.Order).WithMany(p => p.Tickets)
				.HasForeignKey(d => d.OrderId)
				.OnDelete(DeleteBehavior.ClientSetNull)
				.HasConstraintName("FK_Tickets_Orders");
			entity.Property(e => e.IsTransfered).HasDefaultValue(false);
			entity.Property(e => e.IsSold).HasDefaultValue(false);

		});

		modelBuilder.Entity<User>(entity =>
		{
			entity.Property(e => e.Address).HasMaxLength(100);
			entity.Property(e => e.LineId)
				.HasMaxLength(100)
				.HasColumnName("LineID");

		});

		OnModelCreatingPartial(modelBuilder);
	}

	partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}